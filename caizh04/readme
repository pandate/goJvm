本单元主要实现线程私有的运行时数据区,在运行java程序时，java虚拟机需要使用内存来存放格式各样的数据。java虚拟机规范把
这些内存区域叫做运行时数据区。运行时数据区可以分为两类：一类是多线程共享的，另一类则是线程私有的。多线程
共享的运行时数据区需要在java虚拟机启动时创建好，在java虚拟机退出时销毁。线程私有的运行时数据区则在创建线程
时才创建，线程退出时销毁。

多线程共享的内存区域主要存放两类数据：类数据和类实例（对象）。对象数据存放在堆（heap）中，类存放在方法区中
（Method Area）。堆由垃圾收集器定期清理，所以程序员不需要关心对象空间的释放。类数据包括字段和方法信息、方法
的字节码、运行时常量池，等等。从逻辑上来讲，方法区其实也是堆的一部分

线程私有的运行时数据区用于辅助执行java字节码。每个线程都有自己的pc寄存器和java虚拟机。java虚拟机栈又由栈帧
构成，帧中保存方法执行的状态，包括局部变量表（Local Variable）和操作数栈等。在任一时刻，某一线程肯定是在执行
某个方法。这个方法叫做该线程的当前方法；执行该方法的帧叫做线程的当前帧；声明该方法的类叫做当前类。如果当前
方法是java方法，则pc寄存器中存放当前正在执行的java虚拟机指令的地址，否则，当前方法是本地方法，pc寄存器中的值
没有明确定义

数据类型
Java虚拟机可以操作两类数据：基本类型（primitive type）和引用类型（reference type）。基本类型的变量存放的就是
数据本身，引用类型的变量存放的是对象引用，真正的对象数据是在堆里分配的。这里所说的变量包括类变量（静态字段）
、实例变量（非静态字段）、数组元素、方法的参数和局部变量，等等。

基本类型可以进一步分为布尔类型（boolean type）和数字类型（numeric type），数字类型又可以分为整数类型
（integral type）和浮点数类型（floating-point type）。
引用类型可以进一步分为3种：类类型、接口类型和数组类型。类型引用指向类实例，数组类型引用指向数组实例，接
口类型引用指向实现了该接口的类或数组实例。引用类型有一个特殊的值——null，表示该引用不指向任何对象。